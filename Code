function Show-Instructions {
    Write-Host "
    Text-Based Adventure Game
    =========================
    Commands:
    - 'go [direction]' to move (e.g., 'go up')
    - 'get [item]' to pick up an item (e.g., 'get key')
    - 'use [item]' to use an item (e.g., 'use key')
    - 'inventory' to check your items
    - 'look' to inspect the current room (reveals hidden items)
    - 'quit' to exit the game
    "
}

function Generate-RandomRooms {
    $RoomNames = @("Hall", "Kitchen", "Living Room", "Library", "Attic", "Basement", "Garden", "Office")
    $Descriptions = @(
        "You are in a grand hall with high ceilings.",
        "You are in a messy kitchen. It smells of old food.",
        "You are in a cozy living room with a fireplace.",
        "You are in a dusty library filled with old books.",
        "You are in a dark and cluttered attic.",
        "You are in a cold, damp basement. The air is heavy.",
        "You are in a peaceful garden surrounded by flowers.",
        "You are in a small office with papers scattered everywhere."
    )
    $Items = @("key", "map", "book", "lantern", "shovel", "coin", "treasure", "note")
    $HiddenItems = @($null, "map", "key", "note", "shovel", $null, "coin", "book")

    $ShuffledRooms = $RoomNames | Sort-Object { Get-Random }
    $RoomData = @{}

    for ($i = 0; $i -lt $ShuffledRooms.Count; $i++) {
        $RoomData[$ShuffledRooms[$i]] = @{
            Description = $Descriptions[$i]
            Item = $Items | Get-Random
            HiddenItem = $HiddenItems | Get-Random
            Exits = @{}
        }
    }

    $Directions = @("Up", "Down", "Right", "Left")
    for ($i = 0; $i -lt $ShuffledRooms.Count; $i++) {
        foreach ($Direction in $Directions | Get-Random -Count 2) {
            $NextRoom = $ShuffledRooms | Get-Random
            if ($NextRoom -ne $ShuffledRooms[$i]) {
                $RoomData[$ShuffledRooms[$i]].Exits.$Direction = $NextRoom
                $Opposite = switch ($Direction) { "Up" { "Down" } "Down" { "Up" } "Right" { "Left" } "Left" { "Right" } }
                $RoomData[$NextRoom].Exits.$Opposite = $ShuffledRooms[$i]
            }
        }
    }
    return $RoomData
}

$CorrectItemUses = @{
    "key" = "Living Room"
    "map" = "Library"
    "book" = "Office"
    "lantern" = "Attic"
    "shovel" = "Garden"
    "coin" = "Basement"
    "note" = "Kitchen"
    "treasure" = "Hall"
}

$Rooms = Generate-RandomRooms
$Inventory = @()
$CurrentRoom = ($Rooms.Keys | Get-Random)
$CorrectUsesCount = 0

Show-Instructions

while ($true) {
    Write-Host "`nYou are in the $CurrentRoom."
    Write-Host $Rooms[$CurrentRoom].Description

    if ($Rooms[$CurrentRoom].Item) {
        Write-Host "You see a $($Rooms[$CurrentRoom].Item) here."
    }

    $Command = Read-Host "What will you do?"

    if ($Command -eq "quit") {
        Write-Host "Thanks for playing! Goodbye."
        break
    }
    elseif ($Command -like "go *") {
        $Direction = $Command -replace "go ", ""
        if ($Rooms[$CurrentRoom].Exits.$Direction) {
            $CurrentRoom = $Rooms[$CurrentRoom].Exits.$Direction
        } else {
            Write-Host "You can't go that way!"
        }
    }
    elseif ($Command -like "get *") {
        $Item = $Command -replace "get ", ""
        if ($Rooms[$CurrentRoom].Item -eq $Item) {
            Write-Host "You picked up the $Item!"
            $Inventory += $Item
            $Rooms[$CurrentRoom].Item = $null
        } else {
            Write-Host "There is no $Item here."
        }
    }
    elseif ($Command -like "use *") {
        $Item = $Command -replace "use ", ""
        if ($Inventory -contains $Item) {
            if ($CorrectItemUses[$Item] -eq $CurrentRoom) {
                Write-Host "You used the $Item correctly in the $CurrentRoom!"
                $CorrectUsesCount++
                $Inventory = $Inventory | Where-Object { $_ -ne $Item }
                if ($CorrectUsesCount -eq 3) {
                    Write-Host "`nCongratulations! You used three items correctly and won the game!"
                    break
                }
            } else {
                Write-Host "The $Item doesn't seem useful here."
            }
        } else {
            Write-Host "You don't have a $Item."
        }
    }
    elseif ($Command -eq "inventory") {
        if ($Inventory.Count -gt 0) {
            Write-Host "Inventory: $($Inventory -join ', ')"
        } else {
            Write-Host "Your inventory is empty."
        }
    }
    elseif ($Command -eq "look") {
        Write-Host $Rooms[$CurrentRoom].Description
        if ($Rooms[$CurrentRoom].Item) {
            Write-Host "You see a $($Rooms[$CurrentRoom].Item) here."
        }
    }
    else {
        Write-Host "I don't understand that command."
    }
}

